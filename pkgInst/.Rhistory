data2 <- subset(data, data$Date >= date1 & data$Date <= date2)
data2 <- subset(data, data$Date == date1 & data$Date == date2)
str(data)
class(date1)
data2 <- subset(data, data$Date == as.Date(date1) & data$Date == as.Date(date2))
data2 <- subset(data, data$Date >= as.Date(date1) & data$Date <= as.Date(date2))
?lubridate
data2 <- subset(data, data$Date >= ymd(date1) & data$Date <= ymd(date2))
data2 <- subset(data, data$Date == ymd(date1) | data$Date == ymd(date2))
data2 <- subset(data, data$Date == ymd("2007-02-01") | data$Date == ymd("2007-02-02"))
data <- data2
hist(data$Global_active_power)
title(main="Global Active Power")
?hist
hist(data$Global_active_power, col="red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", ylab = "Frequency")
dev.copy(png, "plot1.png")
dev.off()
?plot
plot(data$Time, data$Global_active_power)
head(data)
data2$Time2<-ymd_hms(c(data2$Date,data2$Time))
?ymd_hms
data2$Time2<-c(data2$Date,data2$Time))
data2$Time2<-c(data2$Date,data2$Time)
str(data2)
data2$Time2<-strptime(data2$Time)
?strptime
data2$Time2<-strptime(data2$Time, format="%H:%M:%S")
head(data2)
plot(data2$Time2, data2$Global_active_power)
data2$Time2<-strptime(c(data2$Date,data2$Time), format="%Y-%m-%d %H:%M:%S")
?timestamp
data2$datetime <- ymd_hms(paste(data2$Date, data2$Time))
head(data2)
?paste
plot(data2$datetime, data2$Global_active_power)
?plot
plot(data2$datetime, data2$Global_active_power, type = "l")
plot(data2$datetime, data2$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)")
plot(data2$datetime, data2$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)",xlab="")
source('~/Dropbox/temp/school/Exploratory Data Analysis/project 1/plot2.R')
source('~/Dropbox/temp/school/Exploratory Data Analysis/project 1/plot2.R')
?legend
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
plot(data$datetime, data$Sub_metering_2, col="red")
plot(data$datetime, data$Sub_metering_3, col="blue")
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
points(data$datetime, data$Sub_metering_2, col="red")
points(data$datetime, data$Sub_metering_3, col="blue")
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
points(data$datetime, data$Sub_metering_2, type = "l", col="red")
points(data$datetime, data$Sub_metering_3, type = "l", col="blue")
?pch
legend("topright", col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
points(data$datetime, data$Sub_metering_2, type = "l", col="red")
points(data$datetime, data$Sub_metering_3, type = "l", col="blue")
legend("topright", pch = "l", col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
?lines
points(data$datetime, data$Sub_metering_2, type = "l", col="red")
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
source('~/Dropbox/temp/school/Exploratory Data Analysis/project 1/plot3.R')
legend("top", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
?legend
par("usr")
?par
?inset
legend("top", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), inset="0.05")
legend("top", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), inset=1)
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
lines(data$datetime, data$Sub_metering_3, col="blue")
legend("top", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), inset=1)
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), inset=1)
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, "plot3.png")
dev.off()
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), xjust = 1)
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
lines(data$datetime, data$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), xjust = 1)
dev.copy(png, "plot3.png")
dev.off()
?origin
?legend
legend(x=0, y=0, lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
lines(data$datetime, data$Sub_metering_3, col="blue")
legend(x=0, y=0, lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend(topright, lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), horiz=TRUE)
dev.copy(png, "plot3.png")
dev.off()
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
lines(data$datetime, data$Sub_metering_3, col="blue")
par()
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
png(filename = "plot3.png", width=480, height=480)
dev.off()
?png
png(filename = "plot3.png", width=480, height=480)
dev.off()
png(filename = "plot3.png", width=480, height=480)
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
lines(data$datetime, data$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
source('~/Dropbox/temp/school/Exploratory Data Analysis/project 1/plot3.R')
head(data)
plot(data$datetime, data$Voltage, type = "l")
plot(data$datetime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
plot(data$datetime, data$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
par(mfrow(c(2,2)))
par(mfrow = c(2,2))
plot(data$datetime, data$Global_active_power, type = "l", xlab = "",
ylab = "Global Active Power (kilowatts)")
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
lines(data$datetime, data$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data$datetime, data$Voltage, type = "l", xlab = "datetime",
ylab = "Voltage")
plot(data$datetime, data$Global_reactive_power, type = "l", xlab = "datetime",
ylab = "Global_reactive_power")
dev.off()
par(mfcol = c(2,2))
plot(data$datetime, data$Global_active_power, type = "l", xlab = "",
ylab = "Global Active Power (kilowatts)")
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
lines(data$datetime, data$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data$datetime, data$Voltage, type = "l", xlab = "datetime",
ylab = "Voltage")
plot(data$datetime, data$Global_reactive_power, type = "l", xlab = "datetime",
ylab = "Global_reactive_power")
dev.off()
?legend
par(mfcol = c(2,2))
## ***************************************************************************
## create the first plot and set the axis titles per the example
## ***************************************************************************
plot(data$datetime, data$Global_active_power, type = "l", xlab = "",
ylab = "Global Active Power (kilowatts)")
## ***************************************************************************
## create the second plot and set the axis title, then add the additional
## lines per the example then add the legend to the top right of the plot
## ***************************************************************************
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
lines(data$datetime, data$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
border ="")
## ***************************************************************************
## create the third plot and set the axis titles
## ***************************************************************************
plot(data$datetime, data$Voltage, type = "l", xlab = "datetime",
ylab = "Voltage")
## ***************************************************************************
## create the fourth plot and set the axis titles
## ***************************************************************************
plot(data$datetime, data$Global_reactive_power, type = "l", xlab = "datetime",
ylab = "Global_reactive_power")
par(mfcol = c(2,2))
## ***************************************************************************
## create the first plot and set the axis titles per the example
## ***************************************************************************
plot(data$datetime, data$Global_active_power, type = "l", xlab = "",
ylab = "Global Active Power (kilowatts)")
## ***************************************************************************
## create the second plot and set the axis title, then add the additional
## lines per the example then add the legend to the top right of the plot,
## ensuring that it has no border per the example (bty = "n")
## ***************************************************************************
plot(data$datetime, data$Sub_metering_1, type = "l", xlab = "",
ylab = "Energy sub metering")
lines(data$datetime, data$Sub_metering_2, col="red")
lines(data$datetime, data$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col = c("black", "blue", "red"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
bty = "n")
## ***************************************************************************
## create the third plot and set the axis titles
## ***************************************************************************
plot(data$datetime, data$Voltage, type = "l", xlab = "datetime",
ylab = "Voltage")
## ***************************************************************************
## create the fourth plot and set the axis titles
## ***************************************************************************
plot(data$datetime, data$Global_reactive_power, type = "l", xlab = "datetime",
ylab = "Global_reactive_power")
source('~/Dropbox/temp/school/Exploratory Data Analysis/project 1/plot4.R')
source('~/Dropbox/temp/school/Exploratory Data Analysis/project 1/plot4.R')
source('~/Dropbox/temp/school/Exploratory Data Analysis/project 1/plot4.R')
source('C:/Users/John Henry/Dropbox/temp/school/Exploratory Data Analysis/project 1/plot1.R')
library(ggplot2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?nlme
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?splom
?print.trellis
?trellis.par.set
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
??geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,data="airquality")
library(airquality)
Ozone
airquality$Ozone
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind, data=airquality,col="red", pch=8,main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month),data=airquality)
xyplot(Ozone~Wind | as.factor(Month),data=airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month,data=airquality, layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R",local=TRUE))
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot.R")
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut, data=diamonds, strip=FALSE, pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut, data=diamonds, pch=20,xlab=myxlab,ylab=myylab,main=mymain)
?sample
sample(colors,10)
sample(colors(),10)
pal<-colorRamp(c"red","blue")
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
seq(0,1,len=6)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue","green"))
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pcg=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(20))
?image
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,col=drv)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(hwy,data=mpg,color=drv)
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,aes.fill=drv)
qplot(hwy,data=mpg)
qplot(hwy,data=mpg, fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,loess)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
g<-ggplot(mpg,displ~hwy)
g<-ggplot(mpg,aes(displ,hwy))
g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color(drv)))
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geomline()
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(testdat,aes(x=displ,y=hwy,color=factor(year)))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+lab(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
source('~/.active-rstudio-document')
install.packages("wordcloud")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
out <- googleCite("https://scholar.google.com/citations?user=Cwwq5M0AAAAJ&hl=en", pdfname="dad_cloud.pdf")
out <- googleCite("http://scholar.google.com/citations?user=Cwwq5M0AAAAJ&hl=en", pdfname="dad_cloud.pdf")
mlsjunkgenV <- function(n, w, x, y, z, round = 5) {
if (is.numeric(n))
{
if (is.numeric(w) & is.numeric(x) & is.numeric(y) & is.numeric(z)) {
mls <- numeric()
for (i in 1:n) {
r <- 5.980217 * (w ^ 2) + 9.446377 * (x ^ 0.25) +
4.81379 * (y ^ 0.33) + 8.91197 * (z ^ 0.5)
ri <- r - trunc(r)
mls <- c(mls, round(ri, round))
w <- x
x <- y
y <- z
z <- ri
}
mls
}
else {
stop("Invalid input.  Please ensure all seeds are numeric.")
}
} else {
stop("Invalid input.  Please ensure n is numeric.")
}
}
mlsjunkgenV(5,1,2,3,4)
mlsjunkgenV(500,1,2,3,4)
mlsjunkgenV(500,1,2,3,4,3)
mlsjunkgenV(500,1,2,3,4,1)
mlsjunkgenV(500,1,2,3,4,25)
x<mlsjunkgenV(500,1,2,3,4,25)
x<-mlsjunkgenV(500,1,2,3,4,25)
x
summary(x)
mlsjunkgenD <- function(n, w, x, y, z, round = 5) {
if (is.numeric(n))
{
if (is.numeric(w) & is.numeric(x) & is.numeric(y) & is.numeric(z)) {
mls <- data.frame()
for (i in 1:n) {
r <- 5.980217 * (w ^ 2) + 9.446377 * (x ^ 0.25) +
4.81379 * (y ^ 0.33) + 8.91197 * (z ^ 0.5)
ri <- r - trunc(r)
mls <- rbind(mls, round(ri, round))
w <- x
x <- y
y <- z
z <- ri
}
names(mls) <- "RN"
mls
}
else {
stop("Invalid input.  Please ensure all seeds are numeric.")
}
} else {
stop("Invalid input.  Please ensure n is numeric.")
}
}
x<-mlsjunkgenD(500,1,2,3,4,25)
x
names(x)
source('~/.active-rstudio-document')
printMult(1000000,multiplier = 10^5)
printMult(1000000,multiplier == 10^5)
printMult(1000000,multiplier = 10^6)
printMult(1000000,multiplier = 10^5)
printMult(1000000,multiplier = 10^9)
printMult(1000000,multiplier = 10^3)
source('~/.active-rstudio-document')
printMult(1000000,multiplier = 10^3)
printMult(1000000,multiplier = 10^6)
source('~/.active-rstudio-document')
printMult(1000000,multiplier = 10^6)
printMult(1000000,multiplier = 10^3)
printMult(1000000,multiplier = 10^9)
pkgInst <- function(x) {
for (i in x) {
## "require" returns TRUE invisibly if it was able to load package
if (!require(i, character.only = TRUE)) {
## if package was not able to be loaded, install it
install.packages(i, dependencies = TRUE)
## load package after installing
require (i, character.only = TRUE)
}
}
}
pkgInst("lattice")
pkgs <- c("dplyr", "ggplot2", "reshape2")
pkgInst(pkgs)
pkgInst(pkgs)
remove.packages("dplyr")
library(knitr)
knit2html("pkgInst.Rmd")
setwd("~/Dropbox/R functions and such/pkgInst")
knit2html("pkgInst.Rmd")
---
pkgInst <- function(x) {
for (i in x) {
## "require" returns TRUE invisibly if it was able to load package
if (!require(i, character.only = TRUE)) {
## if package was not able to be loaded, install it
install.packages(i, dependencies = TRUE)
## load package after installing
require (i, character.only = TRUE)
}
}
}
pkgInst <- function(x) {
for (i in x) {
## "require" returns TRUE invisibly if it was able to load package
if (!require(i, character.only = TRUE)) {
## if package was not able to be loaded, install it
install.packages(i, dependencies = TRUE, repos="http://cran.r-project.org/")
## load package after installing
require (i, character.only = TRUE)
}
}
}
## start with a vector of package names, some of which have previously been
## installed and some of which (dplyr in this case) have not
pkgs <- c("dplyr", "ggplot2", "reshape2")
## run pkgInst for this vector of packages to load them into memory and to
## install any previously uninstalled packages
pkgInst(pkgs)
install.packages(c("boot", "codetools", "colorspace", "dae", "jsonlite", "lattice", "manipulate", "maptools", "MASS", "Matrix", "mgcv", "NLP", "plyr", "raster", "Rcpp", "RCurl", "rversions", "sandwich", "shiny", "sp", "testthat", "XML"))
remove.packages("qcc")
remove.packages("qcc")
remove.packages(qcc)
remove.packages(qcc)
remove.packages("qcc")
remove.packages("qcc")
